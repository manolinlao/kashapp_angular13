"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DispenseErrorCode = exports.CashDispenserDispenseCommand = exports.DispensePayloadPositionEnum = void 0;
const _1 = require(".");
const Core_1 = require("../../Core");
var DispensePayloadPositionEnum;
(function (DispensePayloadPositionEnum) {
    /** default */
    DispensePayloadPositionEnum["OUT_DEFAULT"] = "outDefault";
    /** The Dispenser has a left output position. */
    DispensePayloadPositionEnum["LEFT"] = "left";
    /** The Dispenser has a right output position. */
    DispensePayloadPositionEnum["RIGHT"] = "right";
    /** The Dispenser has a center output position. */
    DispensePayloadPositionEnum["CENTER"] = "center";
    /** The Dispenser has a top output position. */
    DispensePayloadPositionEnum["TOP"] = "top";
    /** The Dispenser has a bottom output position. */
    DispensePayloadPositionEnum["BOTTOM"] = "bottom";
    /** The Dispenser has a front output position. */
    DispensePayloadPositionEnum["FRONT"] = "front";
    /** The Dispenser has a rear output position. */
    DispensePayloadPositionEnum["REAR"] = "rear";
})(DispensePayloadPositionEnum = exports.DispensePayloadPositionEnum || (exports.DispensePayloadPositionEnum = {}));
class CashDispenserDispenseCommand {
    constructor(requestId, timeout, denomination, position, token) {
        this.header = {
            name: _1.CashDispenserCommandType.Dispense,
            type: Core_1.XfsMessageType.COMMAND,
            requestId,
        };
        this.payload = {
            timeout,
            denomination,
            position,
            token,
        };
    }
}
exports.CashDispenserDispenseCommand = CashDispenserDispenseCommand;
var DispenseErrorCode;
(function (DispenseErrorCode) {
    /** There are no storage units in the device of the currency specified in the request. */
    DispenseErrorCode["INVALID_CURRENCY"] = "invalidCurrency";
    /** Invalid teller ID. This error will never be generated by a Self-Service device. */
    DispenseErrorCode["INVALID_TELLER_ID"] = "invalidTellerID";
    /** There is a problem with a storage unit. A Storage.StorageErrorEvent will be posted with the details. */
    DispenseErrorCode["CASH_UNIT_ERROR"] = "cashUnitError";
    /** No mix is specified and the sum of the values for counts and cashBox does not match the non-zero currencies specified. */
    DispenseErrorCode["INVALID_DENOMINATION"] = "invalidDenomination";
    /** Unknown mix algorithm. */
    DispenseErrorCode["INVALID_MIX_NUMBER"] = "invalidMixNumber";
    /** The storage units specified in the request were not all of the same currency and this device does not support multiple currencies. */
    DispenseErrorCode["NO_CURRENCY_MIX"] = "noCurrencyMix";
    /** The amount is not dispensable by the device. This error code is also returned if a unit is specified in the counts list which is not a dispensing storage unit, e.g., a retract/reject storage unit. */
    DispenseErrorCode["NOT_DISPENSABLE"] = "notDispensable";
    /** The request requires too many items to be dispensed. */
    DispenseErrorCode["TOO_MANY_ITEMS"] = "tooManyItems";
    /** The device is in an exchange state (see Storage.StartExchange). */
    DispenseErrorCode["EXCHANGE_ACTIVE"] = "exchangeActive";
    /** Cash box amount needed, however teller is not assigned a cash box. */
    DispenseErrorCode["NO_CASH_BOX_PRESENT"] = "noCashBoxPresent";
    /**
     * A mix table is being used to determine the denomination but the amount specified in the request is not in the mix table.
     */
    DispenseErrorCode["AMOUNT_NOT_IN_MIX_TABLE"] = "amountNotInMixTable";
    /** The specified output position is not supported. */
    DispenseErrorCode["UNSUPPORTED_POSITION"] = "unsupportedPosition";
    /** Items have been left in the transport or exit slot as a result of a prior dispense, present or recycler cash-in operation. */
    DispenseErrorCode["ITEMS_LEFT"] = "itemsLeft";
    /** The Service cannot dispense items with an open output shutter. */
    DispenseErrorCode["SHUTTER_OPEN"] = "shutterOpen";
})(DispenseErrorCode = exports.DispenseErrorCode || (exports.DispenseErrorCode = {}));
//# sourceMappingURL=CashDispenserDispenseCommand.js.map